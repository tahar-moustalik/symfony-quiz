[{"/home/tahar/Desktop/symfony-quiz/src/reportWebVitals.js":"1","/home/tahar/Desktop/symfony-quiz/src/App.js":"2","/home/tahar/Desktop/symfony-quiz/src/index.js":"3","/home/tahar/Desktop/symfony-quiz/src/Quiz.js":"4","/home/tahar/Desktop/symfony-quiz/src/App.test.js":"5","/home/tahar/Desktop/symfony-quiz/src/setupTests.js":"6","/home/tahar/Desktop/symfony-quiz/src/Header.js":"7","/home/tahar/Desktop/symfony-quiz/src/SingleChoice.js":"8","/home/tahar/Desktop/symfony-quiz/src/MultiChoice.js":"9","/home/tahar/Desktop/symfony-quiz/src/AnswerOption.js":"10"},{"size":362,"mtime":1610042618457,"results":"11","hashOfConfig":"12"},{"size":1645,"mtime":1610370048838,"results":"13","hashOfConfig":"12"},{"size":596,"mtime":1610225082470,"results":"14","hashOfConfig":"12"},{"size":2924,"mtime":1610637340427,"results":"15","hashOfConfig":"12"},{"size":246,"mtime":1610042618457,"results":"16","hashOfConfig":"12"},{"size":241,"mtime":1610042618457,"results":"17","hashOfConfig":"12"},{"size":2125,"mtime":1610397923279,"results":"18","hashOfConfig":"12"},{"size":1550,"mtime":1612194672487,"results":"19","hashOfConfig":"12"},{"size":1742,"mtime":1612194978990,"results":"20","hashOfConfig":"12"},{"size":697,"mtime":1612194842154,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"229dtp",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/tahar/Desktop/symfony-quiz/src/reportWebVitals.js",[],["48","49"],"/home/tahar/Desktop/symfony-quiz/src/App.js",[],["50","51"],"/home/tahar/Desktop/symfony-quiz/src/index.js",[],["52","53"],"/home/tahar/Desktop/symfony-quiz/src/Quiz.js",["54","55"],"import { Box, Button, Container, Flex, HStack } from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport MultiChoice from \"./MultiChoice\";\nimport SingleChoice from \"./SingleChoice\";\n\nfunction Quiz() {\n  const { category } = useParams();\n  const [data, setData] = useState({\n    questions: [],\n  });\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [nav, setNav] = useState([]);\n\n  useEffect(() => {\n    fetch(`/data/${category}.json`, { mode: \"no-cors\" })\n      .then((response) => response.json())\n      .then((data) => {\n        data.questions.forEach((element, index) => {\n          data.questions[index].multi =\n            element.answers.filter((answer) => answer.correct).length > 1;\n\n          data.questions[index].answers.forEach((answer) => {\n            answer.selected = false;\n          });\n        });\n        setData(data);\n        setNav([...Array(data.questions.length)].map((v, i) => i + 1));\n      });\n  }, []);\n\n  function goToQuestion(number) {\n    const q = number - 1;\n    setCurrentQuestion(q);\n  }\n\n  function nextQuestion() {\n    const next = (nav.length + currentQuestion + 1) % nav.length;\n    setCurrentQuestion(next);\n  }\n\n  function previousQuestion() {\n    const previous = (nav.length + currentQuestion - 1) % nav.length;\n    setCurrentQuestion(previous);\n  }\n\n  return (\n    <Container maxW=\"6xl\">\n      <Header\n        textAlign=\"center\"\n        paddingTop=\"8\"\n        paddingBottom=\"8\"\n        text={`${category.toUpperCase()} QUIZ`}\n      />\n      <HStack wrap=\"wrap\" justifyContent=\"center\">\n        {nav.map((elt, index) => (\n          <Button\n            backgroundColor={currentQuestion == index && \"teal.200\"}\n            key={elt}\n            onClick={() => goToQuestion(elt)}\n            marginBottom=\"2\"\n          >\n            {elt}\n          </Button>\n        ))}\n      </HStack>\n\n      <Flex justifyContent=\"space-between\" marginY=\"6\" alignItems=\"stretch\">\n        <Button\n          fontSize=\"24px\"\n          onClick={previousQuestion}\n          backgroundColor=\"teal.200\"\n        >\n          ðŸ‘ˆ\n        </Button>\n        <Box marginX=\"2\" flex=\"1\">\n          {data.questions.map((row, index) => {\n            return row.multi ? (\n              <MultiChoice\n                row={row}\n                index={index}\n                current={currentQuestion}\n                key={index}\n              />\n            ) : (\n              <SingleChoice\n                key={index}\n                index={index}\n                row={row}\n                current={currentQuestion}\n              />\n            );\n          })}\n        </Box>\n\n        <Button\n          fontSize=\"24px\"\n          onClick={nextQuestion}\n          backgroundColor=\"teal.200\"\n        >\n          ðŸ‘‰\n        </Button>\n      </Flex>\n    </Container>\n  );\n}\n\nexport default Quiz;\n","/home/tahar/Desktop/symfony-quiz/src/App.test.js",[],"/home/tahar/Desktop/symfony-quiz/src/setupTests.js",[],"/home/tahar/Desktop/symfony-quiz/src/Header.js",[],["56","57"],"/home/tahar/Desktop/symfony-quiz/src/SingleChoice.js",["58","59"],"/home/tahar/Desktop/symfony-quiz/src/MultiChoice.js",["60","61"],"import React, { useState } from \"react\";\nimport {\n  Button,\n  Flex,\n  Heading,\n  ListItem,\n  OrderedList,\n  Text,\n} from \"@chakra-ui/react\";\nimport MultiAnswerOption from \"./MultiAnswerOption\";\n\nexport default function MultiChoice({ index, row, current }) {\n  const [qData, setQData] = useState(row);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [showAnswer, setShowAnswer] = useState(false);\n  const handleAnswerSelected = (answerIndex) => {\n    if (selectedAnswers.includes(answerIndex)) {\n      let newS = selectedAnswers.filter((elt) => elt !== answerIndex);\n      setSelectedAnswers(newS);\n    } else {\n      let newS = selectedAnswers;\n      newS.push(answerIndex);\n      setSelectedAnswers(newS);\n    }\n  };\n\n  return (\n    current === index && (\n      <Flex direction=\"column\">\n        <Heading as=\"h2\" textAlign=\"center\">\n          Question nÂ° {index + 1}\n        </Heading>\n        <Text fontSize=\"xl\" textAlign=\"center\">\n          {qData.question}\n        </Text>\n        {qData.multi && (\n          <Text fontSize=\"md\">Multiple answers maybe possible</Text>\n        )}\n        <OrderedList spacing={8} marginTop=\"4\">\n          {qData.answers.map((answer, key) => (\n            <MultiAnswerOption\n              value={answer.value}\n              id={key}\n              onClick={handleAnswerSelected}\n              key={key}\n              showAnswer={showAnswer}\n              correct={answer.correct}\n              selectedAnswers={selectedAnswers}\n            />\n          ))}\n        </OrderedList>\n        <Button\n          marginTop=\"4\"\n          onClick={() => setShowAnswer(!showAnswer)}\n          alignSelf=\"flex-end\"\n        >\n          Show answer\n        </Button>\n\n      </Flex>\n    )\n  );\n}\n\n\n","/home/tahar/Desktop/symfony-quiz/src/AnswerOption.js",["62"],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"63","replacedBy":"67"},{"ruleId":"65","replacedBy":"68"},{"ruleId":"63","replacedBy":"69"},{"ruleId":"65","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":31,"column":6,"nodeType":"73","endLine":31,"endColumn":8,"suggestions":"74"},{"ruleId":"75","severity":1,"message":"76","line":59,"column":46,"nodeType":"77","messageId":"78","endLine":59,"endColumn":48},{"ruleId":"63","replacedBy":"79"},{"ruleId":"65","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":6,"column":3,"nodeType":"83","messageId":"84","endLine":6,"endColumn":11},{"ruleId":"81","severity":1,"message":"85","line":13,"column":17,"nodeType":"83","messageId":"84","endLine":13,"endColumn":25},{"ruleId":"81","severity":1,"message":"82","line":6,"column":3,"nodeType":"83","messageId":"84","endLine":6,"endColumn":11},{"ruleId":"81","severity":1,"message":"85","line":13,"column":17,"nodeType":"83","messageId":"84","endLine":13,"endColumn":25},{"ruleId":"81","severity":1,"message":"86","line":2,"column":10,"nodeType":"83","messageId":"84","endLine":2,"endColumn":13},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],["87"],["88"],["87"],["88"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'category'. Either include it or remove the dependency array.","ArrayExpression",["89"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["87"],["88"],"no-unused-vars","'ListItem' is defined but never used.","Identifier","unusedVar","'setQData' is assigned a value but never used.","'Box' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"90","fix":"91"},"Update the dependencies array to be: [category]",{"range":"92","text":"93"},[1051,1053],"[category]"]